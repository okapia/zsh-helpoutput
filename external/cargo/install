cargo-install 
Install a Rust binary. Default location is $HOME/.cargo/bin

USAGE:
    cargo install [OPTIONS] [--] [crate]...

OPTIONS:
    -q, --quiet                  No output printed to stdout
        --version <VERSION>      Specify a version to install
        --git <URL>              Git URL to install the specified crate from
        --branch <BRANCH>        Branch to use when installing from git
        --tag <TAG>              Tag to use when installing from git
        --rev <SHA>              Specific commit to use when installing from git
        --path <PATH>            Filesystem path to local crate to install
        --list                   list all installed packages and their versions
    -j, --jobs <N>               Number of parallel jobs, defaults to # of CPUs
    -f, --force                  Force overwriting existing crates or binaries
        --features <FEATURES>    Space-separated list of features to activate
        --all-features           Activate all available features
        --no-default-features    Do not activate the `default` feature
        --debug                  Build in debug mode instead of release mode
        --bin <NAME>...          Install only the specified binary
        --bins                   Install all binaries
        --example <NAME>...      Install only the specified example
        --examples               Install all examples
        --target <TRIPLE>        Build for the target triple
        --root <DIR>             Directory to install packages into
        --registry <REGISTRY>    Registry to use
    -v, --verbose                Use verbose output (-vv very verbose/build.rs output)
        --color <WHEN>           Coloring: auto, always, never
        --frozen                 Require Cargo.lock and cache are up to date
        --locked                 Require Cargo.lock is up to date
    -Z <FLAG>...                 Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details
    -h, --help                   Prints help information

ARGS:
    <crate>...    

This command manages Cargo's local set of installed binary crates. Only packages
which have [[bin]] targets can be installed, and all binaries are installed into
the installation root's `bin` folder. The installation root is determined, in
order of precedence, by `--root`, `$CARGO_INSTALL_ROOT`, the `install.root`
configuration key, and finally the home directory (which is either
`$CARGO_HOME` if set or `$HOME/.cargo` by default).

There are multiple sources from which a crate can be installed. The default
location is crates.io but the `--git`, `--path`, and `registry` flags can
change this source. If the source contains more than one package (such as
crates.io or a git repository with multiple crates) the `<crate>` argument is
required to indicate which crate should be installed.

Crates from crates.io can optionally specify the version they wish to install
via the `--version` flags, and similarly packages from git repositories can
optionally specify the branch, tag, or revision that should be installed. If a
crate has multiple binaries, the `--bin` argument can selectively install only
one of them, and if you'd rather install examples the `--example` argument can
be used as well.

By default cargo will refuse to overwrite existing binaries. The `--force` flag
enables overwriting existing binaries. Thus you can reinstall a crate with
`cargo install --force <crate>`.

Omitting the <crate> specification entirely will install the crate in the
current directory. That is, `install` is equivalent to the more explicit
`install --path .`. This behaviour is deprecated, and no longer supported as
of the Rust 2018 edition.

If the source is crates.io or `--git` then by default the crate will be built
in a temporary target directory. To avoid this, the target directory can be
specified by setting the `CARGO_TARGET_DIR` environment variable to a relative
path. In particular, this can be useful for caching build artifacts on
continuous integration systems.
