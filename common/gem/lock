Usage: gem lock GEMNAME-VERSION [GEMNAME-VERSION ...] [options]

  Options:
    -s, --[no-]strict                fail if unable to satisfy a dependency


  Common Options:
    -h, --help                       Get help on this command
    -V, --[no-]verbose               Set the verbose level of output
    -q, --quiet                      Silence command progress meter
        --silent                     Silence RubyGems output
        --config-file FILE           Use this config file instead of default
        --backtrace                  Show stack backtrace on errors
        --debug                      Turn on Ruby debugging
        --norc                       Avoid loading any .gemrc file


  Arguments:
    GEMNAME       name of gem to lock
    VERSION       version of gem to lock

  Summary:
    Generate a lockdown list of gems

  Description:
    The lock command will generate a list of +gem+ statements that will lock
    down
    the versions for the gem given in the command line.  It will specify exact
    versions in the requirements list to ensure that the gems loaded will always
    be consistent.  A full recursive search of all effected gems will be
    generated.
    
    Example:
    
      gem lock rails-1.0.0 > lockdown.rb
    
    will produce in lockdown.rb:
    
      require "rubygems"
      gem 'rails', '= 1.0.0'
      gem 'rake', '= 0.7.0.1'
      gem 'activesupport', '= 1.2.5'
      gem 'activerecord', '= 1.13.2'
      gem 'actionpack', '= 1.11.2'
      gem 'actionmailer', '= 1.1.5'
      gem 'actionwebservice', '= 1.0.0'
    
    Just load lockdown.rb from your application to ensure that the current
    versions are loaded.  Make sure that lockdown.rb is loaded *before* any
    other require statements.
    
    Notice that rails 1.0.0 only requires that rake 0.6.2 or better be used.
    Rake-0.7.0.1 is the most recent version installed that satisfies that, so we
    lock it down to the exact version.

  Defaults:
    --no-strict
