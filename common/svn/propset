propset (pset, ps): Set the value of a property on files, dirs, or revisions.
usage: 1. propset PROPNAME PROPVAL PATH...
       2. propset PROPNAME --revprop -r REV PROPVAL [TARGET]

  1. Changes a versioned file or directory property in a working copy.
  2. Changes an unversioned property on a repository revision.
     (TARGET only determines which repository to access.)

  The value may be provided with the --file option instead of PROPVAL.

  Property names starting with 'svn:' are reserved.  Subversion recognizes
  the following special versioned properties on a file:
    svn:keywords   - Keywords to be expanded.  Valid keywords are:
      URL, HeadURL             - The URL for the head version of the file.
      Author, LastChangedBy    - The last person to modify the file.
      Date, LastChangedDate    - The date/time the file was last modified.
      Rev, Revision,           - The last revision the file changed.
        LastChangedRevision
      Id                       - A compressed summary of the previous four.
      Header                   - Similar to Id but includes the full URL.

      Custom keywords can be defined with a format string separated from
      the keyword name with '='. Valid format substitutions are:
        %a   - The author of the revision given by %r.
        %b   - The basename of the URL of the file.
        %d   - Short format of the date of the revision given by %r.
        %D   - Long format of the date of the revision given by %r.
        %P   - The file's path, relative to the repository root.
        %r   - The number of the revision which last changed the file.
        %R   - The URL to the root of the repository.
        %u   - The URL of the file.
        %_   - A space (keyword definitions cannot contain a literal space).
        %%   - A literal '%'.
        %H   - Equivalent to %P%_%r%_%d%_%a.
        %I   - Equivalent to %b%_%r%_%d%_%a.
      Example custom keyword definition: MyKeyword=%r%_%a%_%P
      Once a custom keyword has been defined for a file, it can be used
      within the file like any other keyword: $MyKeyword$

    svn:executable - If present, make the file executable.  Use
      'svn propdel svn:executable PATH...' to clear.
    svn:eol-style  - One of 'native', 'LF', 'CR', 'CRLF'.
    svn:mime-type  - The mimetype of the file.  Used to determine
      whether to merge the file, and how to serve it from Apache.
      A mimetype beginning with 'text/' (or an absent mimetype) is
      treated as text.  Anything else is treated as binary.
    svn:needs-lock - If present, indicates that the file should be locked
      before it is modified.  Makes the working copy file read-only
      when it is not locked.  Use 'svn propdel svn:needs-lock PATH...'
      to clear.

  Subversion recognizes the following special versioned properties on a
  directory:
    svn:ignore         - A list of file glob patterns to ignore, one per line.
    svn:global-ignores - Like svn:ignore, but inheritable.
    svn:externals      - A list of module specifiers, one per line, in the
      following format similar to the syntax of 'svn checkout':
        [-r REV] URL[@PEG] LOCALPATH
      Example:
        http://example.com/repos/zig foo/bar
      The LOCALPATH is relative to the directory having this property.
      To pin the external to a known revision, specify the optional REV:
        -r25 http://example.com/repos/zig foo/bar
      To unambiguously identify an element at a path which may have been
      subsequently deleted or renamed, specify the optional PEG revision:
        -r25 http://example.com/repos/zig@42 foo/bar
      The URL may be a full URL or a relative URL starting with one of:
        ../  to the parent directory of the extracted external
        ^/   to the repository root
        /    to the server root
        //   to the URL scheme
      Use of the following format is discouraged but is supported for
      interoperability with Subversion 1.4 and earlier clients:
        LOCALPATH [-r PEG] URL
      The ambiguous format 'relative_path relative_path' is taken as
      'relative_url relative_path' with peg revision support.
      Lines starting with a '#' character are ignored.

Valid options:
  -F [--file] ARG          : read property value from file ARG
  --encoding ARG           : treat value as being in charset encoding ARG
  -q [--quiet]             : print nothing, or only summary information
  -r [--revision] ARG      : ARG (some commands also take ARG1:ARG2 range)
                             A revision argument can be one of:
                                NUMBER       revision number
                                '{' DATE '}' revision at start of the date
                                'HEAD'       latest in repository
                                'BASE'       base rev of item's working copy
                                'COMMITTED'  last commit at or before BASE
                                'PREV'       revision just before COMMITTED
  --targets ARG            : pass contents of file ARG as additional args
  -R [--recursive]         : descend recursively, same as --depth=infinity
  --depth ARG              : limit operation by depth ARG ('empty', 'files',
                             'immediates', or 'infinity')
  --revprop                : operate on a revision property (use with -r)
  --force                  : force operation to run
  --changelist [--cl] ARG  : operate only on members of changelist ARG

Global options:
  --username ARG           : specify a username ARG
  --password ARG           : specify a password ARG
  --no-auth-cache          : do not cache authentication tokens
  --non-interactive        : do no interactive prompting (default is to prompt
                             only if standard input is a terminal device)
  --force-interactive      : do interactive prompting even if standard input
                             is not a terminal device
  --trust-server-cert      : accept SSL server certificates from unknown
                             certificate authorities without prompting (but only
                             with '--non-interactive')
  --config-dir ARG         : read user configuration files from directory ARG
  --config-option ARG      : set user configuration option in the format:
                                 FILE:SECTION:OPTION=[VALUE]
                             For example:
                                 servers:global:http-library=serf

